//
// Created by hubert25632 on 24.04.22.
//

#include "CANPrint.hpp"
#include "CanParser_autogenerated.hpp"

CANPrint::CANPrint()
    : SBT::System::Task("CANPrint", 1, 192),
      messageQueue(xQueueCreate(4, sizeof(CAN::RxMessage)))
{
}

void CANPrint::initialize()
{
    uart->ChangeModeToBlocking();
    uart->Initialize();

    // Receive everything
    CAN::AddFilter(CAN::Filter(0, 0, CAN::Filter::FilterType::MASK_FILTER),
                   this, &CANPrint::canCallback);
}

void CANPrint::run()
{
    CAN::RxMessage rxmsg;
    xQueueReceive(messageQueue, &rxmsg, portMAX_DELAY);

    unsigned mppt_number;

    switch(rxmsg.GetSourceID()) {
    case CAN_ID::Source::MPPT_1:
        mppt_number = 1;
        break;
    case CAN_ID::Source::MPPT_2:
        mppt_number = 2;
        break;
    case CAN_ID::Source::MPPT_3:
        mppt_number = 3;
        break;
    case CAN_ID::Source::MPPT_4:
        mppt_number = 4;
        break;
    default:
        mppt_number = 0;
    }

    switch(rxmsg.GetMessageID().paramID) {
    case CAN_ID::Param::PV_DATA: {
        PV_DATA_t pvData = Unpack_PV_DATA(rxmsg.GetPayload());
        uart->printf("# MPPT %d PV data:\r\n"
                     "Panel power [W]: %d.%02d\r\n"
                     "Panel current [A]: %d.%01d\r\n"
                     "Panel voltage [V]: %d.%02d\r\n\n",
                     mppt_number, pvData.panelPower / 100,
                     pvData.panelPower % 100, pvData.panelCurrent / 10,
                     pvData.panelCurrent % 10, pvData.panelVoltage / 100,
                     pvData.panelVoltage % 100);
        break;
    }
    case CAN_ID::Param::MPPT_CHARGER_DATA: {
        MPPT_CHARGER_DATA_t chargerData =
            Unpack_MPPT_CHARGER_DATA(rxmsg.GetPayload());
        uart->printf(
            "# MPPT %d charger data:\r\n"
            "Charger internal temperature [degC]: %d.%02d\r\n"
            "Charger current [A]: %d.%01d\r\n"
            "Charger voltage [V]: %d.%02d\r\n\n",
            mppt_number, chargerData.internalTemperature / 100,
            std::abs(chargerData.internalTemperature) % 100,
            chargerData.batteryCurrent / 10, chargerData.batteryCurrent % 10,
            chargerData.batteryVoltage / 100, chargerData.batteryVoltage % 100);
        break;
    }
    case CAN_ID::Param::YIELD_DATA: {
        YIELD_DATA_t yieldData = Unpack_YIELD_DATA(rxmsg.GetPayload());
        uart->printf("# MPPT %d yield data:\r\n"
                     "Yield today [kWh]: %d.%02d\r\n"
                     "Maximum power today [W]: %d\r\n\n",
                     mppt_number, yieldData.yieldToday / 100,
                     yieldData.yieldToday % 100, yieldData.maximumPowerToday);
        break;
    }
    case CAN_ID::Param::HEARTBEAT: {
        HEARTBEAT_t heartbeat = Unpack_HEARTBEAT(rxmsg.GetPayload());
        uart->printf("# Heartbeat:\r\n"
                     "Uptime [s]: %d.%03d\r\n"
                     "CAN TX message fail count: %d\r\n"
                     "CAN RX message fail count: %d\r\n\n",
                     heartbeat.upTime / (int)1e3, heartbeat.upTime % (int)1e3,
                     heartbeat.canTxMessFailCount,
                     heartbeat.canRxMessFailCount);
        break;
    }
    default:
        uart->printf("# Unknown message:\r\n"
                     "ParamID: %d\r\n\n",
                     rxmsg.GetMessageID().paramID);
        break;
    }
}

void CANPrint::canCallback(CAN::RxMessage rxMessage)
{
    xQueueSend(messageQueue, &rxMessage, 0);
}
